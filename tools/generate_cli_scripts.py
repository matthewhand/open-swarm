#!/usr/bin/env python3
"""
Script to auto-generate [project.scripts] TOML entries for all blueprints with a `cli_name` in their metadata.
Usage: python tools/generate_cli_scripts.py
"""
import os
import ast
from pathlib import Path

BLUEPRINTS_DIR = Path(__file__).parent.parent / "src" / "swarm" / "blueprints"


def extract_cli_name(blueprint_path):
    """Parse the Python file and extract the cli_name from the metadata dict/classvar."""
    try:
        with open(blueprint_path, "r", encoding="utf-8") as f:
            src = f.read()
        tree = ast.parse(src, filename=str(blueprint_path))
    except SyntaxError as e:
        print(f"# [WARN] Skipping {blueprint_path}: SyntaxError: {e}")
        return None
    except Exception as e:
        print(f"# [WARN] Skipping {blueprint_path}: {e}")
        return None
    for node in ast.walk(tree):
        if isinstance(node, ast.ClassDef):
            for stmt in node.body:
                if isinstance(stmt, ast.Assign):
                    for target in stmt.targets:
                        if hasattr(target, 'id') and target.id == "metadata":
                            # Look for cli_name in the dict
                            if isinstance(stmt.value, ast.Dict):
                                for k, v in zip(stmt.value.keys, stmt.value.values):
                                    if isinstance(k, ast.Constant) and k.value == "cli_name":
                                        if isinstance(v, ast.Constant):
                                            return v.value
    return None

def main():
    print("# TOML entries for [project.scripts] (autogenerated)")
    for bp_py in BLUEPRINTS_DIR.glob("*/blueprint_*.py"):
        cli_name = extract_cli_name(bp_py)
        if cli_name:
            module_path = (
                f"swarm.blueprints.{bp_py.parent.name}."
                f"{bp_py.stem.replace('.py', '')}:main"
            )
            print(f"{cli_name} = \"{module_path}\"")

if __name__ == "__main__":
    main()
