{
  "llm": {
    "default": {
      "provider": "openai",
      "model": "gpt-4o",
      "base_url": "https://api.openai.com/v1",
      "api_key": "${OPENAI_API_KEY}",
      "max_tokens": "32000"
    },
    "reason": {
      "provider": "openai",
      "model": "o3-mini",
      "base_url": "https://api.openai.com/v1",
      "api_key": "${OPENAI_API_KEY}",
      "max_tokens": "200000",
      "reasoning_effort": "high"
    },
    "classify": {
      "provider": "openai",
      "model": "llama3.2:latest",
      "base_url": "http://localhost:11434/",
      "api_key": "",
      "cost": 0.1,
      "speed": 0.1,
      "intelligence": 0.1,
      "temperature": 0.0
    },
    "summary": {
      "provider": "openai",
      "model": "gpt-4o-mini",
      "base_url": "https://api.openai.com/v1",
      "api_key": "${OPENAI_API_KEY}",
      "cost": 0.1,
      "speed": 0.1,
      "intelligence": 0.1,
      "temperature": 0.0
    },
    "code-large": {
      "provider": "openai",
      "model": "${LITELLM_MODEL}",
      "base_url": "${LITELLM_BASE_URL}",
      "api_key": "${LITELLM_API_KEY}"
    },
    "deepseek-r1-distill-llama-70b": {
      "provider": "openai",
      "model": "deepseek-r1-distill-llama-70b",
      "base_url": "https://api.groq.com/openai/v1",
      "api_key": "${GROQ_API_KEY}",
      "passthrough": true
    },
    "gpt-4o": {
      "provider": "openai",
      "model": "gpt-4o",
      "base_url": "https://api.openai.com/v1",
      "api_key": "${OPENAI_API_KEY}",
      "cost": 0.5,
      "speed": 0.5,
      "intelligence": 0.5,
      "temperature": 0.1,
      "passthrough": true
    },
    "gpt-4o-mini": {
      "provider": "openai",
      "model": "gpt-4o-mini",
      "base_url": "https://api.openai.com/v1",
      "api_key": "${OPENAI_API_KEY}",
      "cost": 0.3,
      "speed": 0.8,
      "intelligence": 0.3,
      "temperature": 0.1,
      "passthrough": true
    },
    "gpt-3.5-turbo-instruct": {
      "provider": "openai",
      "model": "gpt-3.5-turbo-instruct",
      "base_url": "https://api.openai.com/v1",
      "api_key": "${OPENAI_API_KEY}",
      "cost": 0.1,
      "speed": 0.8,
      "intelligence": 0.2,
      "temperature": 0.1
    }
  },
  "mcpServers": {
    "basic-memory": {
      "command": "uvx",
      "args": [
        "basic-memory",
        "mcp"
      ]
    },
    "mcp-miro": {
      "command": "npx",
      "args": [
        "-y",
        "github:evalstate/mcp-miro"
      ],
      "env": {
        "MIRO-OAUTH-KEY": "${MIRO-OAUTH-KEY}"
      }
    },

    "mondayDotCom": {
      "command": "npx",
      "args": ["-y","mcp-graphql",
        "--endpoint","https://api.monday.com/v2",
        "--headers","'{\"Authorization\":\"Bearer ${MONDAY_API_KEY}\"}'"
      ],
      "env": {
        "MONDAY_API_KEY": "${MONDAY_API_KEY}"
      }
    },
    "wcgw": {
      "command": "uvx",
      "args": [
        "--from",
        "git+https://github.com/rusiaaman/wcgw",
        "wcgw_mcp"
      ]
    },
    "mcp-hfspace": {
      "command": "npx",
      "args": [
        "-y",
        "@llmindset/mcp-hfspace",
        "shuttleai/shuttle-jaguar",
        "styletts2/styletts2",
        "Qwen/QVQ-72B-preview"
      ]
    },
    "mcp-npx-fetch": {
      "command": "npx",
      "args": [
        "-y",
        "@tokenizin/mcp-npx-fetch"
      ]
    },
    "mcp-doc-forge": {
      "command": "npx",
      "args": [
        "-y",
        "@cablate/mcp-doc-forge"
      ]
    },
    "youtube-transcript": {
      "command": "uvx",
      "args": [
        "--from",
        "git+https://github.com/jkawamoto/mcp-youtube-transcript", 
        "mcp-youtube-transcript"
      ]
    },
    "wolframalpha": {
      "command": "npx",
      "args": ["-y","github:Garoth/wolframalpha-llm-mcp"],
      "env": {
        "WOLFRAM_LLM_APP_ID": "${WOLFRAM_LLM_APP_ID}"
      },
      "disabled": false,
      "autoApprove": [
        "ask_llm",
        "get_simple_answer",
        "validate_key"
      ]
    },
    "home-assistant": {
      "command": "mcp-proxy",
      "env": {
        "SSE_URL": "${HASS_URL}",
        "API_ACCESS_TOKEN": "${HASS_API_KEY}"
      }
    },
    "memory": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-memory"
      ]
    },
    "server-wp-mcp": {
      "command": "npx",
      "args": [
        "-y",
        "github:matthewhand/server-wp-mcp"
      ],
      "env": {
        "WP_SITES_PATH": "${WP_SITES_PATH}",
        "WP_ALLOW_INSECURE_TLS": "true"
      }
    },
    "mcp-server-reddit": {
      "command": "uvx",
      "args": [
        "--from", 
        "git+https://github.com/Hawstein/mcp-server-reddit",
        "mcp-server-reddit"
      ]
    },
    "mcp-shell": {
      "command": "npx",
      "args": [
        "-y",
        "github:hdresearch/mcp-shell"
      ]
    },
    "brave-search": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-brave-search"
      ],
      "env": {
        "BRAVE_API_KEY": "${BRAVE_API_KEY}"
      }
    },
    "duckduckgo-search": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-duckduckgo-search"
      ],
      "env": {
        "SERPAPI_KEY": "${SERPAPI_API_KEY}"
      }
    },
    "sqlite": {
      "command": "npx",
      "args": [
        "-y",
        "mcp-server-sqlite-npx",
        "${SQLITE_DB_PATH}"
      ],
      "env": {
        "npm_config_registry": "https://registry.npmjs.org",
        "SQLITE_DB_PATH": "${SQLITE_DB_PATH}"
      }
    },
    "mcp-flowise": {
      "command": "uvx",
      "args": [
        "--from",
        "git+https://github.com/matthewhand/mcp-flowise",
        "mcp-flowise"
      ],
      "env": {
        "DEBUG": "true",
        "FLOWISE_LOGFILE_PATH": "/tmp/debug-mcp-flowise.log",
        "FLOWISE_SIMPLE_MODE": "true",
        "FLOWISE_API_KEY": "${FLOWISE_API_KEY}",
        "FLOWISE_API_ENDPOINT": "${FLOWISE_API_ENDPOINT}",
        "FLOWISE_CHATFLOW_ID": "",
        "FLOWISE_CHATFLOW_DESCRIPTIONS": ""
      }
    },
    "glama": {
        "command": "uvx",
        "args": ["mcp-openapi-proxy"],
        "env": {
            "OPENAPI_SPEC_URL": "https://glama.ai/api/mcp/openapi.json"
        }
    },
    "getzep": {
        "command": "uvx",
        "args": ["mcp-openapi-proxy"],
        "env": {
            "OPENAPI_SPEC_URL": "https://raw.githubusercontent.com/matthewhand/mcp-openapi-proxy/refs/heads/main/examples/getzep.swagger.json",
            "TOOL_WHITELIST": "/sessions",
            "API_KEY": "${GETZEP_API_KEY}",
            "API_AUTH_TYPE": "Api-Key",
            "TOOL_NAME_PREFIX": "zep_"
        }
    },
    "slack": {
        "command": "uvx",
        "args": ["mcp-openapi-proxy"],
        "env": {
            "OPENAPI_SPEC_URL": "https://raw.githubusercontent.com/slackapi/slack-api-specs/master/web-api/slack_web_openapi_v2.json",
            "TOOL_WHITELIST": "/chat,/bots,/conversations,/reminders,/files,/users",
            "API_KEY": "${SLACK_API_KEY}",
            "STRIP_PARAM": "token"
        }
    },
    "render": {
        "command": "uvx",
        "args": ["mcp-openapi-proxy"],
        "env": {
            "OPENAPI_SPEC_URL": "https://api-docs.render.com/openapi/6140fb3daeae351056086186",
            "TOOL_WHITELIST": "/services,/maintenance",
            "API_KEY": "${RENDER_API_KEY}"
        }
    },
    "flyio": {
      "command": "uvx",
      "args": ["mcp-openapi-proxy"],
      "env": {
          "OPENAPI_SPEC_URL": "https://raw.githubusercontent.com/abhiaagarwal/peristera/refs/heads/main/fly-machines-gen/fixed_spec.json",
          "API_KEY": "${FLY_API_KEY}"
      }
    },
    "rag-docs": {
      "command": "npx",
      "args": [
        "-y",
        "@hannesrudolph/mcp-ragdocs"
      ],
      "env": {
        "OPENAI_API_KEY": "${OPENAI_API_KEY}",
        "QDRANT_URL": "${QDRANT_URL}",
        "QDRANT_API_KEY": "${QDRANT_API_KEY}"
      },
      "node_version": "18.16.0"
    },
    "mcp-installer": {
      "command": "npx",
      "args": [
        "-y",
        "@anaisbetts/mcp-installer"
      ]
    },
    "sequential-thinking": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ]
    },
    "everything_server": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-everything"
      ],
      "env": {}
    },
    "filesystem": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "${ALLOWED_PATH}"
      ],
      "env": {
        "ALLOWED_PATH": "${ALLOWED_PATH}"
      }
    }
  },
  "blueprints": {
    "defaults": { "max_llm_calls": 10, "default_markdown_cli": true },
    "RueCodeBlueprint": { "max_llm_calls": 15, "llm_profile": "code-large" } 
  }
}
