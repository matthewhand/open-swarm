{

    "llm": {

        "default": {
            "provider": "openai",
            "model": "o3-mini",
            "base_url": "https://api.openai.com/v1",
            "api_key": "${OPENAI_API_KEY}"
        },
        "reason": {
            "provider": "openai",
            "model": "o3-mini",
            "base_url": "https://api.openai.com/v1",
            "api_key": "${OPENAI_API_KEY}",
            "reasoning_effort": "high"
        },
        "classify": {
            "provider": "openai",
            "model": "llama3.2:latest",
            "base_url": "http://localhost:11434/",
            "api_key": "",
            "cost": 0.1,
            "speed": 0.1,
            "intelligence": 0.1,
            "temperature": 0.0
        },
        "summarise": {
            "provider": "openai",
            "model": "llama3.2:latest",
            "base_url": "http://localhost:11434/",
            "api_key": "",
            "cost": 0.1,
            "speed": 0.1,
            "intelligence": 0.1,
            "temperature": 0.0
        },
        "gpt-4o": {
            "provider": "openai",
            "model": "gpt-4o",
            "base_url": "https://api.openai.com/v1",
            "api_key": "${OPENAI_API_KEY}",
            "cost": 0.5,
            "speed": 0.5,
            "intelligence": 0.5,
            "temperature": 0.1
        }
    },

    "mcpServers": {

        "mcp-shell": {
            "command": "npx",
            "args": ["-y", "github:hdresearch/mcp-shell"]
        },

        "brave-search": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-brave-search"],
            "env": {
              "BRAVE_API_KEY": "${BRAVE_API_KEY}"
            }
          },

        "duckduckgo-search": {
			"command": "npx",
			"args": ["-y", "mcp-duckduckgo-search"],
			"env": {
				"SERPAPI_KEY": "${SERPAPI_API_KEY}"
			}
		},

        "sqlite": {
            "command": "npx",
            "args": ["-y", "mcp-server-sqlite-npx", "${SQLITE_DB_PATH}"],
            "env": {
              "npm_config_registry": "https://registry.npmjs.org",
              "SQLITE_DB_PATH": "${SQLITE_DB_PATH}"
            }
        },

        "sqlite-uvx": {
            "command": "uvx",
            "args": ["mcp-server-sqlite", "--db-path", "/tmp/test.db"]
        },

        "mcp-flowise": {
            "command": "uvx",
            "args": [
                "--refresh", 
                "--from", 
                "git+https://github.com/matthewhand/mcp-flowise",
                "mcp-flowise"
            ],
            "env": {
                "DEBUG": "true",
                "FLOWISE_LOGFILE_PATH": "/tmp/debug-mcp-flowise.log",
                "FLOWISE_SIMPLE_MODE": "true",
                "FLOWISE_API_KEY": "${FLOWISE_API_KEY}",
                "FLOWISE_API_ENDPOINT": "${FLOWISE_API_ENDPOINT}",
                "FLOWISE_CHATFLOW_ID": "",
                "FLOWISE_CHATFLOW_DESCRIPTIONS": ""
            }
        },

        "rag-docs": {
            "command": "npx",
            "args": [
                "-y",
                "@hannesrudolph/mcp-ragdocs"
            ],
            "env": {
                "OPENAI_API_KEY": "${OPENAI_API_KEY}",
                "QDRANT_URL": "${QDRANT_URL}",
                "QDRANT_API_KEY": "${QDRANT_API_KEY}"
            }
        },

        "mcp-installer": {
            "command": "npx",
            "args": ["-y", "@anaisbetts/mcp-installer"]
        },

        "memory": {
            "command": "npx",
            "args": [
              "-y",
              "@modelcontextprotocol/server-memory"
            ]
        },

        "sequential-thinking": {
            "command": "npx",
            "args": [
              "-y",
              "@modelcontextprotocol/server-sequential-thinking"
            ]
        },

        "everything": {
            "command": "npx",
            "args": ["-y", "@modelcontextprotocol/server-everything"],
            "env": {}
        },

        "filesystem": {
            "command": "npx",
            "args": [
              "-y",
              "@modelcontextprotocol/server-filesystem",
              "${ALLOWED_PATH}"
            ],
            "env": {
                "ALLOWED_PATH": "${ALLOWED_PATH}"
	    } 
        }

    }
}
