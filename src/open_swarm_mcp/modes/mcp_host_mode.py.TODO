# src/open_swarm_mcp/modes/mcp_service_mode.py

from mcp.server import Server, NotificationOptions
from mcp.server.session import ServerSession
from mcp.server.stdio import stdio_server
from mcp.server.models import InitializationOptions
from mcp.types import (
    JSONRPCMessage,
    JSONRPCRequest,
    JSONRPCResponse,
)
import asyncio
from typing import List, Dict, Any

from swarm import Agent  # Ensure this import aligns with your project structure
from open_swarm_mcp.utils.logger import setup_logger
from open_swarm_mcp.utils.color_utils import color_text, initialize_colorama

from pydantic import BaseModel

logger = setup_logger(__name__)

# Define the Tool and ToolResult classes as Pydantic models
class Tool(BaseModel):
    name: str
    description: str = "No description provided."
    parameters: Dict[str, Any] = {}

class ToolResult(BaseModel):
    success: bool
    result: Any = None
    error: str = ""

async def run_mcp_service_mode(agent: Agent):
    """
    MCP Service mode for Open Swarm MCP.
    
    Args:
        agent (Agent): Swarm agent to handle MCP Service operations.
    """
    try:
        # Initialize colorama for colored outputs
        initialize_colorama()
        
        print(color_text("Starting MCP Service mode...", "cyan"))
        logger.info("MCP Service mode started.")

        # Create MCP server instance
        server = Server(name="open-swarm-mcp", version="1.0.0")

        # Register tools as MCP-compliant functions
        @server.list_tools()
        async def handle_list_tools() -> List[Tool]:
            tools = []
            for func_name, func_meta in agent.tools.items():
                tool = Tool(
                    name=func_name,
                    description=func_meta.get("description", "No description provided."),
                    parameters={
                        "type": "object",
                        "properties": func_meta.get("parameters", {}),
                        "required": func_meta.get("required", []),
                    },
                )
                tools.append(tool)
            logger.debug("Registered tools: %s", tools)
            return tools

        @server.execute_tool()
        async def handle_tool_execution(name: str, arguments: Dict[str, Any]) -> ToolResult:
            """
            Handle the execution of a tool by name with provided arguments.
            
            Args:
                name (str): The name of the tool to execute.
                arguments (dict): The arguments for the tool.
            
            Returns:
                ToolResult: The result of the tool execution.
            """
            logger.info("Received tool execution request: %s with arguments: %s", name, arguments)
            try:
                if name in agent.tools:
                    tool_func = agent.tools[name]["func"]
                    # Execute the tool function asynchronously
                    result = await tool_func(**arguments)
                    return ToolResult(success=True, result=result)
                else:
                    error_msg = f"Tool '{name}' not found."
                    logger.error(error_msg)
                    return ToolResult(success=False, error=error_msg)
            except Exception as e:
                logger.error("Error executing tool '%s': %s", name, str(e))
                return ToolResult(success=False, error=str(e))

        # Start the MCP server using stdio streams
        async with stdio_server() as (read_stream, write_stream):
            await server.run(
                read_stream,
                write_stream,
                InitializationOptions(
                    server_name="open-swarm-mcp",
                    server_version="1.0.0",
                    capabilities=server.get_capabilities(
                        notification_options=NotificationOptions(),
                        experimental_capabilities={},
                    ),
                ),
            )

    except Exception as e:
        logger.error(f"Error running MCP Service mode: {e}")
        print(f"Error running MCP Service mode: {e}")

# Ensure this script runs only when executed directly
if __name__ == "__main__":
    # Example usage: Initialize your agent and run the service mode
    # Replace this with your actual agent initialization logic
    example_agent = Agent(
        name="ExampleAgent",
        instructions="You are an MCP agent.",
    )
    
    # Register example tools (replace with actual tool registration)
    async def example_tool(a: int, b: int) -> int:
        """Adds two numbers together."""
        return a + b
    
    example_agent.register_tool(name="add_numbers", func=example_tool, description="Adds two integers.")

    asyncio.run(run_mcp_service_mode(example_agent))
