name: Python Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]  # Testing across multiple Python versions

    steps:
      # 1. Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Install uv using the official standalone installer
      - name: Install uv
        uses: astral-sh/setup-uv@v4

      # 3. Set up Python environment
      - name: Set up Python
        run: uv python install

      # 4. Cache pip dependencies (optional but recommended for faster builds)
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 5. Install Python dependencies
      - name: Install dependencies
        run: |
          uv sync --all-extras --dev
          uv run pip install --upgrade pip
          uv run pip install pytest pytest-cov

      # 6. Run Pytest with Coverage
      - name: Run tests with coverage
        run: |
          uv run pytest --cov=open_swarm_mcp --cov-report=xml --cov-report=html

      # 7. Upload Coverage Report as Artifact
      - name: Upload Coverage Report (XML)
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-xml
          path: coverage.xml

      - name: Upload Coverage Report (HTML)
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-html
          path: htmlcov/

      # 8. Upload Coverage to Codecov (Optional)
      - name: Upload coverage to Codecov
        if: success() || failure()
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}  # Ensure this secret is set in your repository

      # 9. (Optional) Enforce Coverage Thresholds
      - name: Enforce Coverage Thresholds
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage.json', 'utf-8'));
            const totalCoverage = coverage.total.lines.pct;
            const threshold = 10;  // TODO increase 
            if (totalCoverage < threshold) {
              core.setFailed(`Coverage ${totalCoverage}% is below the threshold of ${threshold}%`);
            } else {
              console.log(`Coverage ${totalCoverage}% meets the threshold of ${threshold}%`);
            }
